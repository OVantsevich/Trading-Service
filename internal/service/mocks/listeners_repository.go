// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/OVantsevich/Trading-Service/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ListenersRepository is an autogenerated mock type for the ListenersRepository type
type ListenersRepository struct {
	mock.Mock
}

// ClosePosition provides a mock function with given fields: ctx
func (_m *ListenersRepository) ClosePosition(ctx context.Context) (*model.Notification, error) {
	ret := _m.Called(ctx)

	var r0 *model.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.Notification, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.Notification); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateListenerSL provides a mock function with given fields: ctx, notify
func (_m *ListenersRepository) CreateListenerSL(ctx context.Context, notify *model.Notification) error {
	ret := _m.Called(ctx, notify)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Notification) error); ok {
		r0 = rf(ctx, notify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateListenerTP provides a mock function with given fields: ctx, notify
func (_m *ListenersRepository) CreateListenerTP(ctx context.Context, notify *model.Notification) error {
	ret := _m.Called(ctx, notify)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Notification) error); ok {
		r0 = rf(ctx, notify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveListenerSL provides a mock function with given fields: notify
func (_m *ListenersRepository) RemoveListenerSL(notify *model.Notification) error {
	ret := _m.Called(notify)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Notification) error); ok {
		r0 = rf(notify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveListenerTP provides a mock function with given fields: notify
func (_m *ListenersRepository) RemoveListenerTP(notify *model.Notification) error {
	ret := _m.Called(notify)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Notification) error); ok {
		r0 = rf(notify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendPrices provides a mock function with given fields: prices
func (_m *ListenersRepository) SendPrices(prices []*model.Price) {
	_m.Called(prices)
}

type mockConstructorTestingTNewListenersRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewListenersRepository creates a new instance of ListenersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewListenersRepository(t mockConstructorTestingTNewListenersRepository) *ListenersRepository {
	mock := &ListenersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
