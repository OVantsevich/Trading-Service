// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/OVantsevich/Trading-Service/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PositionsRepository is an autogenerated mock type for the PositionsRepository type
type PositionsRepository struct {
	mock.Mock
}

// ClosePosition provides a mock function with given fields: ctx, positionID, closed, updated
func (_m *PositionsRepository) ClosePosition(ctx context.Context, positionID string, closed int64, updated time.Time) (*model.Position, error) {
	ret := _m.Called(ctx, positionID, closed, updated)

	var r0 *model.Position
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, time.Time) *model.Position); ok {
		r0 = rf(ctx, positionID, closed, updated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64, time.Time) error); ok {
		r1 = rf(ctx, positionID, closed, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePosition provides a mock function with given fields: ctx, position
func (_m *PositionsRepository) CreatePosition(ctx context.Context, position *model.Position) (*model.Position, error) {
	ret := _m.Called(ctx, position)

	var r0 *model.Position
	if rf, ok := ret.Get(0).(func(context.Context, *model.Position) *model.Position); ok {
		r0 = rf(ctx, position)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Position) error); ok {
		r1 = rf(ctx, position)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotification provides a mock function with given fields: ctx
func (_m *PositionsRepository) GetNotification(ctx context.Context) (*model.Notification, error) {
	ret := _m.Called(ctx)

	var r0 *model.Notification
	if rf, ok := ret.Get(0).(func(context.Context) *model.Notification); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPositionByID provides a mock function with given fields: ctx, positionID
func (_m *PositionsRepository) GetPositionByID(ctx context.Context, positionID string) (*model.Position, error) {
	ret := _m.Called(ctx, positionID)

	var r0 *model.Position
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Position); ok {
		r0 = rf(ctx, positionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, positionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPositions provides a mock function with given fields: ctx, userID
func (_m *PositionsRepository) GetUserPositions(ctx context.Context, userID string) ([]*model.Position, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*model.Position
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Position); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Position)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStopLoss provides a mock function with given fields: ctx, positionID, stopLoss, updated
func (_m *PositionsRepository) SetStopLoss(ctx context.Context, positionID string, stopLoss float64, updated time.Time) error {
	ret := _m.Called(ctx, positionID, stopLoss, updated)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, time.Time) error); ok {
		r0 = rf(ctx, positionID, stopLoss, updated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTakeProfit provides a mock function with given fields: ctx, positionID, takeProfit, updated
func (_m *PositionsRepository) SetTakeProfit(ctx context.Context, positionID string, takeProfit float64, updated time.Time) error {
	ret := _m.Called(ctx, positionID, takeProfit, updated)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, time.Time) error); ok {
		r0 = rf(ctx, positionID, takeProfit, updated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePosition provides a mock function with given fields: ctx, position
func (_m *PositionsRepository) UpdatePosition(ctx context.Context, position *model.Position) error {
	ret := _m.Called(ctx, position)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Position) error); ok {
		r0 = rf(ctx, position)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPositionsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPositionsRepository creates a new instance of PositionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPositionsRepository(t mockConstructorTestingTNewPositionsRepository) *PositionsRepository {
	mock := &PositionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
