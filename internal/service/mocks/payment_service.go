// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PaymentService is an autogenerated mock type for the PaymentService type
type PaymentService struct {
	mock.Mock
}

// DecreaseAmount provides a mock function with given fields: ctx, accountID, amount
func (_m *PaymentService) DecreaseAmount(ctx context.Context, accountID string, amount float64) error {
	ret := _m.Called(ctx, accountID, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(ctx, accountID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountID provides a mock function with given fields: ctx, userID
func (_m *PaymentService) GetAccountID(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseAmount provides a mock function with given fields: ctx, accountID, amount
func (_m *PaymentService) IncreaseAmount(ctx context.Context, accountID string, amount float64) error {
	ret := _m.Called(ctx, accountID, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(ctx, accountID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPaymentService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaymentService creates a new instance of PaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaymentService(t mockConstructorTestingTNewPaymentService) *PaymentService {
	mock := &PaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
