// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/tradingModel.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradingServiceClient is the client API for TradingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingServiceClient interface {
	OpenPosition(ctx context.Context, in *OpenPositionRequest, opts ...grpc.CallOption) (*OpenPositionResponse, error)
	ClosePosition(ctx context.Context, in *ClosePositionRequest, opts ...grpc.CallOption) (*Response, error)
	GetPositionByID(ctx context.Context, in *GetPositionByIDRequest, opts ...grpc.CallOption) (*GetPositionByIDResponse, error)
	GetUserPositions(ctx context.Context, in *GetUserPositionsRequest, opts ...grpc.CallOption) (*GetUserPositionsResponse, error)
	StopLoss(ctx context.Context, in *StopLossRequest, opts ...grpc.CallOption) (*Response, error)
	TakeProfit(ctx context.Context, in *TakeProfitRequest, opts ...grpc.CallOption) (*Response, error)
}

type tradingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingServiceClient(cc grpc.ClientConnInterface) TradingServiceClient {
	return &tradingServiceClient{cc}
}

func (c *tradingServiceClient) OpenPosition(ctx context.Context, in *OpenPositionRequest, opts ...grpc.CallOption) (*OpenPositionResponse, error) {
	out := new(OpenPositionResponse)
	err := c.cc.Invoke(ctx, "/tradingservice_proto.TradingService/OpenPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) ClosePosition(ctx context.Context, in *ClosePositionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/tradingservice_proto.TradingService/ClosePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetPositionByID(ctx context.Context, in *GetPositionByIDRequest, opts ...grpc.CallOption) (*GetPositionByIDResponse, error) {
	out := new(GetPositionByIDResponse)
	err := c.cc.Invoke(ctx, "/tradingservice_proto.TradingService/GetPositionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) GetUserPositions(ctx context.Context, in *GetUserPositionsRequest, opts ...grpc.CallOption) (*GetUserPositionsResponse, error) {
	out := new(GetUserPositionsResponse)
	err := c.cc.Invoke(ctx, "/tradingservice_proto.TradingService/GetUserPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) StopLoss(ctx context.Context, in *StopLossRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/tradingservice_proto.TradingService/StopLoss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceClient) TakeProfit(ctx context.Context, in *TakeProfitRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/tradingservice_proto.TradingService/TakeProfit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingServiceServer is the server API for TradingService service.
// All implementations must embed UnimplementedTradingServiceServer
// for forward compatibility
type TradingServiceServer interface {
	OpenPosition(context.Context, *OpenPositionRequest) (*OpenPositionResponse, error)
	ClosePosition(context.Context, *ClosePositionRequest) (*Response, error)
	GetPositionByID(context.Context, *GetPositionByIDRequest) (*GetPositionByIDResponse, error)
	GetUserPositions(context.Context, *GetUserPositionsRequest) (*GetUserPositionsResponse, error)
	StopLoss(context.Context, *StopLossRequest) (*Response, error)
	TakeProfit(context.Context, *TakeProfitRequest) (*Response, error)
	mustEmbedUnimplementedTradingServiceServer()
}

// UnimplementedTradingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradingServiceServer struct {
}

func (UnimplementedTradingServiceServer) OpenPosition(context.Context, *OpenPositionRequest) (*OpenPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPosition not implemented")
}
func (UnimplementedTradingServiceServer) ClosePosition(context.Context, *ClosePositionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePosition not implemented")
}
func (UnimplementedTradingServiceServer) GetPositionByID(context.Context, *GetPositionByIDRequest) (*GetPositionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionByID not implemented")
}
func (UnimplementedTradingServiceServer) GetUserPositions(context.Context, *GetUserPositionsRequest) (*GetUserPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPositions not implemented")
}
func (UnimplementedTradingServiceServer) StopLoss(context.Context, *StopLossRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopLoss not implemented")
}
func (UnimplementedTradingServiceServer) TakeProfit(context.Context, *TakeProfitRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeProfit not implemented")
}
func (UnimplementedTradingServiceServer) mustEmbedUnimplementedTradingServiceServer() {}

// UnsafeTradingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingServiceServer will
// result in compilation errors.
type UnsafeTradingServiceServer interface {
	mustEmbedUnimplementedTradingServiceServer()
}

func RegisterTradingServiceServer(s grpc.ServiceRegistrar, srv TradingServiceServer) {
	s.RegisterService(&TradingService_ServiceDesc, srv)
}

func _TradingService_OpenPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).OpenPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradingservice_proto.TradingService/OpenPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).OpenPosition(ctx, req.(*OpenPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_ClosePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).ClosePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradingservice_proto.TradingService/ClosePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).ClosePosition(ctx, req.(*ClosePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetPositionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetPositionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradingservice_proto.TradingService/GetPositionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetPositionByID(ctx, req.(*GetPositionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_GetUserPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).GetUserPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradingservice_proto.TradingService/GetUserPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).GetUserPositions(ctx, req.(*GetUserPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_StopLoss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopLossRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).StopLoss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradingservice_proto.TradingService/StopLoss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).StopLoss(ctx, req.(*StopLossRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingService_TakeProfit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeProfitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServiceServer).TakeProfit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradingservice_proto.TradingService/TakeProfit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServiceServer).TakeProfit(ctx, req.(*TakeProfitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingService_ServiceDesc is the grpc.ServiceDesc for TradingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tradingservice_proto.TradingService",
	HandlerType: (*TradingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenPosition",
			Handler:    _TradingService_OpenPosition_Handler,
		},
		{
			MethodName: "ClosePosition",
			Handler:    _TradingService_ClosePosition_Handler,
		},
		{
			MethodName: "GetPositionByID",
			Handler:    _TradingService_GetPositionByID_Handler,
		},
		{
			MethodName: "GetUserPositions",
			Handler:    _TradingService_GetUserPositions_Handler,
		},
		{
			MethodName: "StopLoss",
			Handler:    _TradingService_StopLoss_Handler,
		},
		{
			MethodName: "TakeProfit",
			Handler:    _TradingService_TakeProfit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tradingModel.proto",
}
